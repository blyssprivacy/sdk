diff a/js/bucket/bucket.ts b/js/bucket/bucket.ts	(rejected hunks)
@@ -140,6 +147,32 @@ export class Bucket {
     return (await this.performPrivateReads([key]))[0];
   }
 
+  private async getHint(): Promise<Uint8Array> {
+    return this.api.hint(this.name);
+  }
+
+  private async performDoublePIRRead(key: string): Promise<boolean> {
+    const idx = this.dpLib.get_row(key);
+    const hintPromise = this.getHint();
+    const query = this.dpLib.generate_query(idx);
+    this.dpLib.load_hint(await hintPromise);
+
+    const queryResult = await this.getRawResponse(query);
+    const decryptedResult = this.dpLib.decode_response(queryResult);
+    const extractedResult = this.dpLib.extract_result(decryptedResult);
+    return extractedResult;
+  }
+
+  private ensureSpiral() {
+    if (this.scheme !== 'spiral')
+      throw 'Cannot perform this action on this bucket';
+  }
+
+  private ensureDoublePIR() {
+    if (this.scheme !== 'doublepir')
+      throw 'Cannot perform this action on this bucket';
+  }
+
   /**
    * Initialize a client for a single, existing Blyss bucket.
    *
@@ -172,6 +212,7 @@ export class Bucket {
    *   reuse, to avoid generating and uploading larger amounts of data.
    */
   async setup(uuid?: string) {
+    this.ensureSpiral();
     if (uuid && this.check(uuid)) {
       this.lib.generateKeys(false);
       this.uuid = uuid;
@@ -234,6 +278,8 @@ export class Bucket {
    * @param key - The key to delete.
    */
   async deleteKey(key: string) {
+    this.ensureSpiral();
+
     await this.api.deleteKey(this.name, key);
   }
 
@@ -255,6 +301,8 @@ export class Bucket {
    * @param key - The key to _privately_ retrieve the value of.
    */
   async privateRead(key: string): Promise<any> {
+    this.ensureSpiral();
+
     return (await this.performPrivateRead(key)).data;
   }
 
@@ -268,6 +316,8 @@ export class Bucket {
    * @param key - The key to _privately_ retrieve the value of.
    */
   async privateReadWithMetadata(key: string): Promise<DataWithMetadata> {
+    this.ensureSpiral();
+
     return await this.performPrivateRead(key);
   }
 
